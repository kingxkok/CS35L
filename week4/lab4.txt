$ wget http://web.cs.ucla.edu/classes/fall17/cs35L/assign/coreutils-with-bug.tar.gz
$ tar -xvf coreutils-with-bug.tar.gz

$ cd coreutils-with-bug
$ ./configure
$ make

In file included from utimecmp.c:41:0:
utimens.h:2:5: error: conflicting types for 'futimens'
 int futimens (int, char const *, struct timespec const [2]);
     ^~~~~~~~
In file included from utimecmp.h:25:0,
                 from utimecmp.c:25:
/usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was here
 extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
            ^~~~~~~~

			
$ wget http://web.cs.ucla.edu/classes/fall17/cs35L/assign/coreutils.diff
$ patch -p0 -i coreutils.diff

$ make
$ make install

works after patch because the duplicate names for different functions
are now different names (one of the futimens became coreutils_futimens)

$ buggy_ls=~/Desktop/coreutils-with-bug/src/ls
$ buggy_touch=~/Desktop/coreutils-with-bug/src/touch

to store the buggy ls in an environment variable
so I can conveniently test the bug


In temp directory:

$ TZ=UTC0 ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 xian csugrad 0 2017-10-24 18:14:37.343852158 +0000 now1
-rw-r--r-- 1 xian csugrad 0 2017-10-24 18:14:32.591774130 +0000 now
-rw-r--r-- 1 xian csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
$ TZ=UTC0 $buggy_ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 xian csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
-rw-r--r-- 1 xian csugrad 0 2017-10-24 18:14:37.343852158 +0000 now1
-rw-r--r-- 1 xian csugrad 0 2017-10-24 18:14:32.591774130 +0000 now

In home directory:

$ TZ=UTC0 ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 xian csugrad 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice
-rw-r--r-- 1 xian csugrad 0 2017-10-24 18:12:26.875220000 +0000 now1
-rw-r--r-- 1 xian csugrad 0 2017-10-24 18:12:20.506643000 +0000 now

$ TZ=UTC0 $buggy_ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 xian csugrad 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice
-rw-r--r-- 1 xian csugrad 0 2017-10-24 18:12:26.875220000 +0000 now1
-rw-r--r-- 1 xian csugrad 0 2017-10-24 18:12:20.506643000 +0000 now


SEASnet says the file was modified in 2054-12-17 17:28:16.00
...SEASnet does not so good.

gdb $buggy_ls
export TZ=UTC0
(gdb) r -lt --full-time wwi-armistice now now1
(gdb) info func

compare_mtime has a problem probably coz we are invoking
that to compare modified times
and that's where it orders the output
so something's wrong here probably
maybe overflow

compare_mtime calls timespec_cmp in timespec.h
so check there.

we find a.tv_nsec - b.tv_nsec;
this could overflow.

changed diff = bla-bla to simple make it return based
on < > comparisons. I.e.
if(bla < bla) return -1;
else if (bla > bla) return 1;
else return 0;

this fixed the ordering issue


(gdb) b sprintf
to find the printing issue (why it prints at 2054)


check when_local && 0

prints the time in long and we find that it's negative in the temp
but positive (overflowed) in the non temp folder

I give up fixing the printing error where it prints 2054 since
it is also there in the built in ls of seasnet, and also
so i can move on.
Sorry.


finish with
diff coreutils-with-bug/lib/timespec.h coreutils-with-bug-fixed/lib/timespec.h  -u > lab4.diff

tested by untarring the original buggy zip file
patch with coreutils.diff 
then in the lib folder
patch timespec.h ../../lab4.diff

make, make install
call $buggy_ls...
...it works!



SORTING ENCRYPTED TEXT

Basic stuff to sort:
modified character to character comparison
word comparison that calls the char_compare 

Error checking:
need read_in error check
memory error checking

Need to allocate memory:
for pointers to words (growing word list)
for the words themselves (growing words)

At first I got a lot of segfaults
Esp. when I tried to realloc double sized to 
amortize realloc costs
Turns out I goofed by only moving onto a
new word when I realloced for the wordList

so it segfaulted when I tried to free two
pointers in the wordList array that 
actually pointed to the same address

found out by noticing my printout
was printing mulitples copies of the
same word

the memory dump also told me 
mem address of instruction that
segfaulted

and doing objdump of the code 
gave me that it was free@plt


so, to fix, I 
//Set word back to empty by pointing it to other space
word = NULL;
word = (char*)malloc(sizeof(char));
charIndex = -1; //-1 to bring back to 0 when summed later
wordSize = 1;
/**** *BEFORE* I *****/
//resize word list if needed
if(wordIndex+2 > wordListSize) {
				wordListSize = ((wordIndex<<1) + 2); //doubling size errored at first :c
				char** more_words = realloc(wordList, (wordListSize)*sizeof(char*));
...continued... 
}


I also freed. Everything.
All in the wordList.
The wordList itself.
Even the temporary word storing variable:
word.

That's word. Yo.


Also used diff to check expected output and my sfrob output
bcz coreutils r cool.

I must admit that I did look at code on github for inspiration.
However, I believe in my humble but correct (I hope) opinion,
that my code performs better.
I double alloced space each realloc.
More memory can be unnecessarily allocated during run-time,
but means less wasted time reallocing
and memory is cheaper than performance right? hehe

I also free everything.
No. Memory. Leak.
Except when read errors occur but
I gave up at that point haha.

